const int IN1 = 4;
const int IN2 = 16;
const int ENA = 15;

const int IN3 = 17;
const int IN4 = 5;
const int ENB = 18;

const int IN5 = 32;
const int IN6 = 27;
const int ENC = 13;

const int IN7 = 26
const int IN8 = 25;
const int END = 33;
const int MOTOR_SPEED = 110;

const int trigPin = 19;
const int echoPin = 21;
const int leftIRPin = 23;
const int rightIRPin = 22;

#include <Bluepad32.h>

#define ledPin 2

ControllerPtr myControllers[BP32_MAX_GAMEPADS];
bool isAutoMode = false;

void onConnectedController(ControllerPtr ctl) {
  digitalWrite(ledPin, HIGH);
  ctl->playDualRumble(0, 1000, 0x80, 0x40);
  bool foundEmptySlot = false;
  for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
    if (myControllers[i] == nullptr) {
      Serial.printf("CALLBACK: Controller is connected, index=%d\n", i);
      ControllerProperties properties = ctl->getProperties();
      Serial.printf("Controller model: %s, VID=0x%04x, PID=0x%04x\n", ctl->getModelName().c_str(), properties.vendor_id, properties.product_id);
      myControllers[i] = ctl;
      foundEmptySlot = true;
      break;
    }
  }
  if (!foundEmptySlot) {
    Serial.println("CALLBACK: Controller connected, but could not find empty slot");
  }
  BP32.enableNewBluetoothConnections(false);
}

void onDisconnectedController(ControllerPtr ctl) {
  bool foundController = false;
  digitalWrite(ledPin, LOW);
  for (int i = 0; i < BP32_MAX_GAMEPADS; i++) {
    if (myControllers[i] == ctl) {
      Serial.printf("CALLBACK: Controller disconnected from index=%d\n", i);
      myControllers[i] = nullptr;
      foundController = true;
      break;
    }
  }

  if (!foundController) {
    Serial.println("CALLBACK: Controller disconnected, but not found in myControllers");
  }
}

void processGamepad(ControllerPtr ctl) {
  if (ctl->miscButtons()) {
    int miscButtons = ctl->miscButtons();
    if (miscButtons == 2) {
      isAutoMode = true;
      Serial.println("Mode switched to AUTO");
      ctl->setColorLED(255, 255, 255);
    } else if (miscButtons == 4) {
      isAutoMode = false;
      Serial.println("Mode switched to MANUAL");
      ctl->setColorLED(0, 0, 255);
    }
  }

  if (isAutoMode) {
    autoModeActions(ctl);
  } else {
    manualModeActions(ctl);
  }

  // Print controller status for debugging
  Serial.print("l1: ");
  Serial.println(ctl->l1());
  Serial.print("l2: ");
  Serial.println(ctl->l2());
  Serial.print("r1: ");
  Serial.println(ctl->r1());
  Serial.print("r2: ");
  Serial.println(ctl->r2());
  Serial.print("a: ");
  Serial.println(ctl->a());
  Serial.print("b: ");
  Serial.println(ctl->b());
  Serial.print("x: ");
  Serial.println(ctl->x());
  Serial.print("y: ");
  Serial.println(ctl->y());
  Serial.print("dpad: ");
  Serial.println(ctl->dpad());
  Serial.print("axisX: ");
  Serial.println(ctl->axisX());
  Serial.print("axisY: ");
  Serial.println(ctl->axisY());
  Serial.print("axisRX: ");
  Serial.println(ctl->axisRX());
  Serial.print("axisRY: ");
  Serial.println(ctl->axisRY());
  Serial.print("buttons: ");
  Serial.println(ctl->buttons());
  Serial.print("miscButtons: ");
  Serial.println(ctl->miscButtons());
}

void autoModeActions(ControllerPtr ctl) {  // autoMode------
  Serial.println("Executing auto mode actions");
  if (ctl->dpad()) {
    int dpad = ctl->dpad();
    if (dpad == 1) {

      long duration, distance;

      digitalWrite(trigPin, LOW);
      delayMicroseconds(2);
      digitalWrite(trigPin, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigPin, LOW);

      duration = pulseIn(echoPin, HIGH);
      distance = (duration * 0.034) / 2;

      int leftIR = digitalRead(leftIRPin);
      int rightIR = digitalRead(rightIRPin);

      if (distance < 20) {
        Serial.println("Obstacle detected by ultrasonic sensor! Stopping motors.");
        stopMotors();
        return;
      }

      if (leftIR == HIGH && rightIR == HIGH) {  // L and R IR no one ，car will Forward
        ForwardAuto();
      } else if (leftIR == LOW && rightIR == HIGH) {  // L IR have some one , car tuen R
        TurnR();
      } else if (rightIR == LOW && leftIR == HIGH) {  // R IR have some one ，car turn L
        TurnL();
      } else {
        stopMotors();
      }
    }
  }
}

void manualModeActions(ControllerPtr ctl) {   //manualMode-------
  Serial.println("Executing manual mode actions");
  digitalWrite(ENA, 255);
  digitalWrite(ENB, 255);
  digitalWrite(ENC, 255);
  digitalWrite(END, 255);
  if (ctl->l1()) {
    TurnL();
  } else if (ctl->r1()) {
    TurnR();
  } else if (ctl->dpad()) {
    int dpad = ctl->dpad();
    const int DPAD_UP = 1;
    const int DPAD_DOWN = 2;
    const int DPAD_RIGHT = 4;
    const int DPAD_LEFT = 8;


    if (dpad == DPAD_UP) {
      Forward();
    } else if (dpad == DPAD_DOWN) {
      Backward();
    } else if (dpad == DPAD_LEFT) {
      LeftSid();
    } else if (dpad == DPAD_RIGHT) {
      RightSid();
    }
  } else {
    stopMotors();
  }
}

void processControllers() {
  for (auto myController : myControllers) {
    if (myController && myController->isConnected() && myController->hasData()) {
      if (myController->isGamepad()) {
        processGamepad(myController);
      } else {
        Serial.println("Unsupported controller");
      }
    }
  }
}

void setup() {
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN5, OUTPUT);
  pinMode(IN6, OUTPUT);
  pinMode(ENC, OUTPUT);
  pinMode(IN7, OUTPUT);
  pinMode(IN8, OUTPUT);
  pinMode(END, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(leftIRPin, INPUT);
  pinMode(rightIRPin, INPUT);

  Serial.begin(115200);

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.printf("Firmware: %s\n", BP32.firmwareVersion());
  const uint8_t* addr = BP32.localBdAddress();
  Serial.printf("BD Addr: %2X:%2X:%2X:%2X:%2X:%2X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
  BP32.setup(&onConnectedController, &onDisconnectedController);

  if (true) {  //--------------------------------true Pair ------ false Normal
    BP32.forgetBluetoothKeys();
  } else {
    delay(100);
    BP32.enableNewBluetoothConnections(false);
  }
  BP32.enableVirtualDevice(false);

  delay(500);
}

void loop() {
  bool dataUpdated = BP32.update();
  if (dataUpdated) {
    processControllers();
  }
  delay(5);
}
void stopMotors() {

}

void Backward() {

}

void LeftSid() {

}

void RightSid() {

}
void TurnL() {

}
void TurnR() {

}

void Forward() {

}

void ForwardAuto() {

}

